# -*- coding: utf-8 -*-
"""
/***************************************************************************
 POPDialog
                                 A QGIS plugin
 pop plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-09-28
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Dolphin Database
        email                : dolphin.dbfatec@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.QtCore import QSettings
import requests

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'login_dialog.ui'))


class loginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(loginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.lbl_email_error.setVisible(False)
        self.lbl_password_error.setVisible(False)
        self.lbl_error.setVisible(False)
        self.btn_login.clicked.connect(self.handle_button)
        self.txt_email.focusInEvent = self.resetEmail
        self.txt_password.focusInEvent = self.resetPassword

    def resetEmail(self, event):
        self.lbl_email_error.setVisible(False)

    def resetPassword(self, event):
        self.lbl_password_error.setVisible(False)
    
    def handle_button(self):
        email = self.txt_email.text()
        senha = self.txt_password.text()
        if email == "" or senha == "":
            if email=="":
                self.lbl_email_error.setVisible(True)
                self.lbl_email_error.setStyleSheet("color: red;")
                self.lbl_email_error.setText("Preencha o email")
            if senha == "":
                self.lbl_password_error.setVisible(True)
                self.lbl_password_error.setStyleSheet("color: red;")
                self.lbl_password_error.setText("Preencha a senha")
            return
        res = requests.post("http://localhost:5050/auth",data={
            'username':email,
            'password':senha
        })
        if res.status_code==200:
            token = res.json()['access_token']
            setting = QSettings('POP','auth')
            setting.setValue('jwt',token)
            self.close()
            self.accept()
        else:
            self.lbl_error.setVisible(True)
            self.lbl_error.setStyleSheet("color: red;")
            self.lbl_error.setText("Dados Inv√°lidos!")
            return
        
